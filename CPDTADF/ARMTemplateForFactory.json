{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "CPDTADF"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "cpdt.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "cpdt"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "cpdt"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PLUpsert')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Upsert",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Upsert",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceTable": {},
									"Lookup": {},
									"DestinationTable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Upsert')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CP_DF_AreaConfig",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CP_DF_AreaConfig",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Source": {},
									"Lookuptable": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CP_DF_AreaConfig')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Business_Unit_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Business_Unit",
						"type": "varchar"
					},
					{
						"name": "Block_ID",
						"type": "varchar"
					},
					{
						"name": "Area_Classification_1",
						"type": "varchar"
					},
					{
						"name": "Area_Classification_2",
						"type": "varchar"
					},
					{
						"name": "Plant_ID",
						"type": "varchar"
					},
					{
						"name": "Plant_ID2",
						"type": "varchar"
					},
					{
						"name": "Asset_Owner",
						"type": "varchar"
					},
					{
						"name": "Cost_Center",
						"type": "varchar"
					},
					{
						"name": "Tier_Classification",
						"type": "varchar"
					},
					{
						"name": "Comments",
						"type": "varchar"
					},
					{
						"name": "Business_Justification",
						"type": "varchar"
					},
					{
						"name": "Attachments",
						"type": "varchar"
					},
					{
						"name": "Status",
						"type": "varchar"
					},
					{
						"name": "Field_Engineer",
						"type": "varchar"
					},
					{
						"name": "Field_Engineer_Remarks",
						"type": "varchar"
					},
					{
						"name": "Approver_1_Name",
						"type": "varchar"
					},
					{
						"name": "Approver_1_Remarks",
						"type": "varchar"
					},
					{
						"name": "Approver_1_Timestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Approver_2_Name",
						"type": "varchar"
					},
					{
						"name": "Approver_2_Remarks",
						"type": "varchar"
					},
					{
						"name": "Approver_2_Timestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Created_By",
						"type": "varchar"
					},
					{
						"name": "Created_Timestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Updated_By",
						"type": "varchar"
					},
					{
						"name": "Updated_Timestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "CP_OLTP",
					"table": "CP_Area_Config_Master"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Business_Unit",
						"type": "varchar"
					},
					{
						"name": "Block_ID",
						"type": "varchar"
					},
					{
						"name": "Area_Classification_1",
						"type": "varchar"
					},
					{
						"name": "Area_Classification_2",
						"type": "varchar"
					},
					{
						"name": "Plant_ID",
						"type": "varchar"
					},
					{
						"name": "Plant_ID2",
						"type": "varchar"
					},
					{
						"name": "Asset_Owner",
						"type": "varchar"
					},
					{
						"name": "Cost_Center",
						"type": "varchar"
					},
					{
						"name": "Tier_Classification",
						"type": "varchar"
					},
					{
						"name": "Comments",
						"type": "varchar"
					},
					{
						"name": "Business_Justification",
						"type": "varchar"
					},
					{
						"name": "Attachments",
						"type": "varchar"
					},
					{
						"name": "Begin_Date",
						"type": "date"
					},
					{
						"name": "End_Date",
						"type": "date"
					},
					{
						"name": "Current_Rec_In",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Field_Engineer_Name",
						"type": "varchar"
					},
					{
						"name": "Field_Engineer_Remarks",
						"type": "varchar"
					},
					{
						"name": "Approver_1_Name",
						"type": "varchar"
					},
					{
						"name": "Approver_1_Remarks",
						"type": "varchar"
					},
					{
						"name": "Approver_1_Timestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Approver_2_Name",
						"type": "varchar"
					},
					{
						"name": "Approver_2_Remarks",
						"type": "varchar"
					},
					{
						"name": "Approver_2_Timestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Created_By",
						"type": "varchar"
					},
					{
						"name": "Created_Timestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Updated_By",
						"type": "varchar"
					},
					{
						"name": "Updated_Timestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Business_Unit_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Business_Unit_Key",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "CP_OLAP",
					"table": "CP_Area_Dimension"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Age",
						"type": "int",
						"precision": 10
					},
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "Salary",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "destination"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Age",
						"type": "int",
						"precision": 10
					},
					{
						"name": "City",
						"type": "varchar"
					},
					{
						"name": "Salary",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "source"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CP_DF_AreaConfig')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "Source"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "Lookuptable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "lkp"
						},
						{
							"name": "CheckColumnChanges"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Business_Unit_ID as integer,",
						"          Business_Unit as string,",
						"          Block_ID as string,",
						"          Area_Classification_1 as string,",
						"          Area_Classification_2 as string,",
						"          Plant_ID as string,",
						"          Plant_ID2 as string,",
						"          Asset_Owner as string,",
						"          Cost_Center as string,",
						"          Tier_Classification as string,",
						"          Comments as string,",
						"          Business_Justification as string,",
						"          Attachments as string,",
						"          Status as string,",
						"          Field_Engineer as string,",
						"          Field_Engineer_Remarks as string,",
						"          Approver_1_Name as string,",
						"          Approver_1_Remarks as string,",
						"          Approver_1_Timestamp as timestamp,",
						"          Approver_2_Name as string,",
						"          Approver_2_Remarks as string,",
						"          Approver_2_Timestamp as timestamp,",
						"          Created_By as string,",
						"          Created_Timestamp as timestamp,",
						"          Updated_By as string,",
						"          Updated_Timestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Source",
						"source(output(",
						"          Business_Unit as string,",
						"          Block_ID as string,",
						"          Area_Classification_1 as string,",
						"          Area_Classification_2 as string,",
						"          Plant_ID as string,",
						"          Plant_ID2 as string,",
						"          Asset_Owner as string,",
						"          Cost_Center as string,",
						"          Tier_Classification as string,",
						"          Comments as string,",
						"          Business_Justification as string,",
						"          Attachments as string,",
						"          Begin_Date as date,",
						"          End_Date as date,",
						"          Current_Rec_In as integer,",
						"          Field_Engineer_Name as string,",
						"          Field_Engineer_Remarks as string,",
						"          Approver_1_Name as string,",
						"          Approver_1_Remarks as string,",
						"          Approver_1_Timestamp as timestamp,",
						"          Approver_2_Name as string,",
						"          Approver_2_Remarks as string,",
						"          Approver_2_Timestamp as timestamp,",
						"          Created_By as string,",
						"          Created_Timestamp as timestamp,",
						"          Updated_By as string,",
						"          Updated_Timestamp as timestamp,",
						"          Business_Unit_ID as integer,",
						"          Business_Unit_Key as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Lookuptable",
						"Source, Lookuptable lookup(Source@Business_Unit_ID == Lookuptable@Business_Unit_ID",
						"     && Source@Business_Unit == Lookuptable@Business_Unit",
						"     && Source@Block_ID == Lookuptable@Block_ID",
						"     && Source@Area_Classification_1 == Lookuptable@Area_Classification_1",
						"     && Source@Area_Classification_2 == Lookuptable@Area_Classification_2",
						"     && Source@Plant_ID == Lookuptable@Plant_ID",
						"     && Source@Plant_ID2 == Lookuptable@Plant_ID2",
						"     && Source@Asset_Owner == Lookuptable@Asset_Owner",
						"     && Source@Cost_Center == Lookuptable@Cost_Center,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lkp",
						"lkp alterRow(insertIf(isNull(Lookuptable@Business_Unit_ID)||(Source@Business_Unit_ID!=Lookuptable@Business_Unit_ID&&(Source@Business_Unit!=Lookuptable@Business_Unit||Source@Block_ID!=Lookuptable@Block_ID||Source@Area_Classification_1!=Lookuptable@Area_Classification_1||Source@Area_Classification_2!=Lookuptable@Area_Classification_2||Source@Plant_ID!=Lookuptable@Plant_ID||Source@Plant_ID2!=Lookuptable@Plant_ID2||Source@Asset_Owner!=Lookuptable@Asset_Owner||Source@Cost_Center!=Lookuptable@Cost_Center)))) ~> CheckColumnChanges",
						"CheckColumnChanges sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Business_Unit as string,",
						"          Block_ID as string,",
						"          Area_Classification_1 as string,",
						"          Area_Classification_2 as string,",
						"          Plant_ID as string,",
						"          Plant_ID2 as string,",
						"          Asset_Owner as string,",
						"          Cost_Center as string,",
						"          Tier_Classification as string,",
						"          Comments as string,",
						"          Business_Justification as string,",
						"          Attachments as string,",
						"          Begin_Date as date,",
						"          End_Date as date,",
						"          Current_Rec_In as integer,",
						"          Field_Engineer_Name as string,",
						"          Field_Engineer_Remarks as string,",
						"          Approver_1_Name as string,",
						"          Approver_1_Remarks as string,",
						"          Approver_1_Timestamp as timestamp,",
						"          Approver_2_Name as string,",
						"          Approver_2_Remarks as string,",
						"          Approver_2_Timestamp as timestamp,",
						"          Created_By as string,",
						"          Created_Timestamp as timestamp,",
						"          Updated_By as string,",
						"          Updated_Timestamp as timestamp,",
						"          Business_Unit_ID as integer,",
						"          Business_Unit_Key as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Business_Unit = Source@Business_Unit,",
						"          Block_ID = Source@Block_ID,",
						"          Area_Classification_1 = Source@Area_Classification_1,",
						"          Area_Classification_2 = Source@Area_Classification_2,",
						"          Plant_ID = Source@Plant_ID,",
						"          Plant_ID2 = Source@Plant_ID2,",
						"          Asset_Owner = Source@Asset_Owner,",
						"          Cost_Center = Source@Cost_Center,",
						"          Tier_Classification = Source@Tier_Classification,",
						"          Comments = Source@Comments,",
						"          Business_Justification = Source@Business_Justification,",
						"          Attachments = Source@Attachments,",
						"          Business_Unit_ID = Source@Business_Unit_ID",
						"     )) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Upsert')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source",
								"type": "DatasetReference"
							},
							"name": "SourceTable"
						},
						{
							"dataset": {
								"referenceName": "Destination",
								"type": "DatasetReference"
							},
							"name": "Lookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Destination",
								"type": "DatasetReference"
							},
							"name": "DestinationTable"
						}
					],
					"transformations": [
						{
							"name": "LookupDestination"
						},
						{
							"name": "SetRowOperations"
						},
						{
							"name": "FilterActionableRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Name as string,",
						"          Age as integer,",
						"          City as string,",
						"          Salary as decimal(10,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceTable",
						"source(output(",
						"          ID as integer,",
						"          Name as string,",
						"          Age as integer,",
						"          City as string,",
						"          Salary as decimal(10,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Lookup",
						"SourceTable, Lookup lookup(SourceTable@ID == Lookup@ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupDestination",
						"LookupDestination alterRow(insertIf(isNull(Lookup@ID)),",
						"     updateIf(!isNull(Lookup@ID)&&(SourceTable@Name!=Lookup@Name||SourceTable@Age!=Lookup@Age||SourceTable@City!=Lookup@City||SourceTable@Salary!=Lookup@Salary))) ~> SetRowOperations",
						"SetRowOperations filter(isNull(Lookup@ID) || ",
						"(!isNull(Lookup@ID) && ",
						" (SourceTable@Name != Lookup@Name || ",
						"  SourceTable@Age != Lookup@Age || ",
						"  SourceTable@City != Lookup@City || ",
						"  SourceTable@Salary != Lookup@Salary))) ~> FilterActionableRows",
						"FilterActionableRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Name as string,",
						"          Age as integer,",
						"          City as string,",
						"          Salary as decimal(10,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DestinationTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source')]",
				"[concat(variables('factoryId'), '/datasets/Destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Upsert_DC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Source",
								"type": "DatasetReference"
							},
							"name": "SourceTable"
						},
						{
							"dataset": {
								"referenceName": "Destination",
								"type": "DatasetReference"
							},
							"name": "Lookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Destination",
								"type": "DatasetReference"
							},
							"name": "Destination"
						}
					],
					"transformations": [
						{
							"name": "LookupDestination"
						},
						{
							"name": "AddOperationType"
						},
						{
							"name": "ExcludeSkipRows"
						},
						{
							"name": "AlterRowTransformation"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Name as string,",
						"          Age as integer,",
						"          City as string,",
						"          Salary as decimal(10,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceTable",
						"source(output(",
						"          ID as integer,",
						"          Name as string,",
						"          Age as integer,",
						"          City as string,",
						"          Salary as decimal(10,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Lookup",
						"SourceTable, Lookup lookup(SourceTable@ID == Lookup@ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupDestination",
						"LookupDestination derive(ActionType = case(",
						"    isNull(Lookup@ID), 'INSERT',",
						"    SourceTable@Name != Lookup@Name || ",
						"    SourceTable@Age != Lookup@Age || ",
						"    SourceTable@City != Lookup@City || ",
						"    SourceTable@Salary != Lookup@Salary, 'UPDATE',",
						"    'SKIP'",
						")) ~> AddOperationType",
						"AddOperationType filter(ActionType != 'SKIP') ~> ExcludeSkipRows",
						"ExcludeSkipRows alterRow(insertIf(ActionType=='INSERT'),",
						"     updateIf(ActionType=='UPDATE')) ~> AlterRowTransformation",
						"AlterRowTransformation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as integer,",
						"          Name as string,",
						"          Age as integer,",
						"          City as string,",
						"          Salary as decimal(10,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> Destination"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Source')]",
				"[concat(variables('factoryId'), '/datasets/Destination')]"
			]
		}
	]
}